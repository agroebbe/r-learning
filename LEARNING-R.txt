LINKS
------
- VERY GOOD: http://ww2.coastal.edu/kingw/statistics/R-tutorials/index.html

- data analysis techniques: http://www.r-tutor.com/
- r refcard
- http://www.statmethods.net/
- http://www.cookbook-r.com/Manipulating_data/Comparing_vectors_or_factors_with_NA/

- info on stats: http://rtutorialseries.blogspot.be/2012/03/r-tutorial-series-centering-variables.html

- Rstudio: console: https://support.rstudio.com/hc/en-us/articles/200711853-Keyboard-Shortcuts

- FINDING SAMPLE DATASETS: 
http://stat.ethz.ch/R-manual/R-patched/library/datasets/html/00Index.html


OPEN QUESTIONS
--------------
* data.frame vs data.table --> extra package: http://cran.r-project.org/web/packages/data.table/index.html


* split / unlist / 
* method to read  !!! : aggregate.data.frame

- learn to understand:
library(doBy)
summaryBy(mpg + wt ~ cyl + vs, data = mtcars, 
   FUN = function(x) { c(m = mean(x), s = sd(x)) } )
# produces mpg.m wt.m mpg.s wt.s for each 
# combination of the levels of cyl and vs

- see what plot & ggplot2 can do...
- working with questions
- def functions
- histogram 2 var from input data set and then get prob(X|Y) and plot
- usable datasets in R
- standard dev why n-1 ?? relearn

- apply(function, rowsOrCols)
- order function for sorting

- aggregate how to name data column
- ggplot --> learn
---- also see: http://davetang.org/muse/2013/05/22/using-aggregate-and-apply-in-r/

RHADOOP LEARNING
----------------
* READ about debugging, etc.
** http://grokbase.com/t/gg/rhadoop/12bpahxb34/396-toy-example-from-airplane-data-tutorial-throwing-errors

* RMR2 example: https://github.com/RevolutionAnalytics/rmr2/blob/master/pkg/tests/wordcount.R

* # NOTE: when hadoop streaming failed with error code 5  --> file not found or permission problem




LEARNING
--------
* find things in the system environment: 
Sys.getenv()[grep("hadoop",Sys.getenv())]

* in a list d of dataframes, select the first 'list' in every data frame: 
 lapply(d,"[[",1)

* make a list of functions (named) and then to run and time them:
lapply(list_of_function, function(f) system.time(f(x)))
# http://adv-r.had.co.nz/Functional-programming.html#anonymous-functions
---- apply these functions with some defaults: 
lapply(funs, function(f) f(x, na.rm = TRUE))


* unlist to apply functions to things and to flatten out:
words_vector<-unlist(strsplit(unlist(map.values)," "))

* lapply & sapply difference (sapply simplifies to vector when return value is a simple value)
see: https://www.inkling.com/read/r-cookbook-paul-teetor-1st/chapter-6/recipe-6-2
*** also see: http://adv-r.had.co.nz/Functional-programming.html

* testing library: http://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf

* system(env) # read environment

* transform some values in factors for lattice plots:
  library(lattice) 
  attach(mtcars)
  gear.f<-factor(gear,levels=c(3,4,5),labels=c("3gears","4gears","5gears")) 
  cyl.f <-factor(cyl,levels=c(4,6,8),labels=c("4cyl","6cyl","8cyl")) 
  # boxplots for each combination of two factors 
  bwplot(cyl.f~mpg|gear.f, ylab="Cylinders", xlab="Miles per Gallon", main   ="Mileage by Cylinders and Gears", layout=c(1,3))
  # note that in the formula of vectors: corresponding elements are by index

* make a test set and a data set
  index <- 1:nrow(cats)
  testindex <- sample(index, trunc(length(index)/3))
  testset <- cats[testindex,]
  trainset <- cats[-testindex,] # removes the rows indicates by the testindex numbers

* join:
- data table --> use keys for performance
- sqldf
- plyr & dplyr
- data frame subscripts: df1[,"NewDataCol"]<-df2[df1[ ,"Key"], "NewDataCol"]

* 
Especially if you're also interested in data manipulation in general (including sorting, filtering, subsetting, summarizing etc.), you should definitely take a look at dplyr, which comes with a variety of functions all designed to facilitate your work specifically with data frames and certain other database types. It even offers quite an elaborate SQL interface, and even a function to convert (most) SQL code directly into R.

*
Inner join: merge(x = df1, y = df2, by = "CustomerId")
Full Outer join: merge(x = df1, y = df2, by = "CustomerId", all = TRUE)
Left outer: merge(x = df1, y = df2, by = "CustomerId", all.x=TRUE)
Right outer: merge(x = df1, y = df2, by = "CustomerId", all.y=TRUE)
Cross join: merge(x = df1, y = df2, by = NULL)
-- params: by, by.x, by.y, all.x, all.y,...

* bar() plot gives back the centres of the bars !

* plot and label points (x,y):
  attach(mtcars)
  plot(wt, mpg, main="Milage vs. Car Weight", xlab="Weight", ylab="Mileage", pch=18, col="blue")
  text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")

* package gdata (excel, trim function, ...)

* #sort by mpg (ascending) and cyl (descending)
newdata <- mtcars[order(mpg, -cyl),] # note the , !!!

* everyday = seq(from=as.Date('2005-1-1'),to=as.Date('2005-12-31'),by='day')


* factors in R: http://www.stat.berkeley.edu/~s133/factors.html

* note: indexing a vector with an index-vector with more elements will produce the larger vector by looking up the indices
example: c(1,2,3)[c(1,2,3,1,2,3)] or for factors levels(f)[f]

!!! * read.table will automatically convert character variables to factors unless the as.is= argument is specified

!! * view #occurences of values of A in interval range and different values of B: (note: 'cut' maps value to an interval)
  with(airquality, table(cut(Temp, quantile(Temp)), Month))

* grepl("a","abcd") return TRUE or FALSE according to match
* search for help with '?', for example: ?regex
* unlist(lapply(someData,mean))

* data exploration
unique(someCol)

* select columns in a dataset:
--> use a boolean selection on the column names
newdata <- mydata[!(names(mydata) %in% c("v1", "v2", "v3") )]

* select data rows by giving the indices (which):
newdata <- mydata[ which(mydata$gender=='F' & mydata$age > 65), ]
note: also attach & detach can be used !

* select data rows and columns:
newdata <- subset(mydata, age >= 20 | age < 10, select=c(ID, Weight))
note: select=weight:income --> would give a range of columns

* JOIN: 
total <- merge(data frameA,data frameB,by=c("ID","Country"))

* setting data:
mydata$v1[mydata$v1==99] <- NA

* mydata[!complete.cases(mydata),] helps to view data with NA's 
(note '' is not an NA !!!)

* in R-studio --> View(someDataFrame) --> table view
*** also: View(a[5,])


* remove working data:
    rm(list = ls())
* dimnames(data) --> and then dim nr can be used!
* tapply(states$Life.Exp, states$region, mean)
--> tapply(data, index, function)

* see some frequency per interval:
as.data.frame(table(cut(faithful$waiting,breaks=3)))

* nice table printout:
as.data.frame(lapply(someDataFrame,someFunOnCol))

* !! resume data table with key # freq combinations 
--> as.data.frame(ftable(ucb))

* ftable(ucb) --> make a flat pivot table
* addmargins(gen.adm.table)
-- add sums to a table

* every Nth record of a dataframe (e.g. ucb)
ucb[seq(1,length(ucb[,1]),400),]

* info on tables: 
http://www.cyclismo.org/tutorial/R/tables.html

* string maniplation (repeating): 
paste(paste0("x",1:5), collapse= "+")
gives "x1+x2+x3+x4+x5"

* R is sometimes hard: info:
    * use <- or -> for assignment
    * ls() lists variables but not those with a dot
    * $ is a bit like the . in Java
    * x[-n] returns a copy of x with the nth element removed
    * x[1]
    * x[(2,3)]
    * x[0] does nothing !
    * x[(FALSE,TRUE,TRUE)] --> to take elements
    * assignment to selection vector:
    x[x > 3] <- 7 turns (3, 1, 4, 1, 5, 9) into (3, 1, 7, 1, 7, 7)
    x[x > 3] <- c(10, 11, 12) would produce (3, 1, 10, 1, 11, 12)
    * seq(a,b,n) a<= & <=b & steps of size n so a, a+n,...
    * a:b = seq(a,b,1)
    * seq(a,b,length=n) --> seq(a,b,(b-a)/(n-1))
    * convert TO: as.integer(), as.character()
    * someList[[1]] or someList$nameOfFirstOne
    ** (list extends -> insert NULL values)
    ** list get only when exists
    * arrray(vector, dim) --> fills column-wise
    * array(vector, dim, by.row=TRUE) --> fills row-wise
    * NaN & NA
    * need to handle NA's
    * is.nan & is.na (!! is.na gives true for NaN and for NA !!)
    * a function returns the value of its last line
    * f <- function(a,b=10) { ... } for default values
    * f <- function(a,b=max(a), ...) --> so more sophisticaded default values possible
    * call with named arguments
    * pass by value, best is to return a list as output
    * complex numbers e.g. 0+1i

* see som code:
getS3method(’median’, ’default’)

* row binding 2 dataframes to extend them: df <- rbind(df,data.frame(a=sample(letters,1), b=runif(1)))

* dev.new() --> new plotting window
* sort(...) is by value, so returned thing is the sorted one
* d = density (PDF)
* p = prob (CDF)
* q = quantile (CDF-1)
* r = random sample from it

* sessionInfo()

* plot, legend, axis, mtext, grid, 
par: plotting parameters to be specified before
the plots. Arguments: e.g. mfrow=c(1,3)):
number of figures per page (1 row, 3 columns);
  new=TRUE: draw plot over previous plot.


* library(zoo) na.approx --> interpolation
* library(zoo) rollmean --> moving average
* cumsum
* paste = concat, substr
* aggregate(x,by=list(some-values-here),FUN="mean")

* example DATA info: library(help = datasets)

* timesieries (monthly data): 
 z <- ts(matrix(rnorm(300), 100, 3), start = c(1961, 1), frequency = 12)

* data to work on: library(help = "datasets")

* as.numeric(...), as.character(...)
* is.na(...)
* x$n --> element of x named n --> x[["n"]]
* rowSums(m), rowMeans(m), ...
* colSums(m), colMeans(), ...

* rbind & cbind --> combine row of col into matrix

* select elements of a vector: v[c(F,T,F)]
* so also reason why d[names(d)=="a"] works

* date1=strptime( c("20100225230000", "20100226010000"), format="%Y%m%d%H%M%S", tz="CET")
* remove NA's: max(c(1,2,NA), na.rm=TRUE)

* write.table & read.table

* plyr --> need R v 3.1.1
install R packages
install codetools
install plyr

* library(plyr)
  df = rename(df,c("oldName"="newName"))
  OR
  names(df)[names(df)=="oldName"] = newName

* install new R dependencies in ubuntu: http://cran.rstudio.com/bin/linux/ubuntu/

* pairs(df) --> scatterplot matrix

* functions work on objects, make frame objects and then apply mean: mean( data.frame(x,y) )

* par()

*points(t$c, pch=20, cex=4,col=rgb(0,0,1,0.3))
--- pch = plot symbol
--- cex = factor to scale (e.g. x 4)

* plot(t$a, type="l", ylim=range(t),lwd=3, col=rgb(1,0,0,0.3))
--- lwd = line width
* points(t$c, pch=20, cex=4,col=rgb(0,0,1,0.3))
* lines(t$b, type="s", lwd=4,col=rgb(0.3,0.4,0.3,0.9))

* plot(rnorm(100), type="l", col="gold")

* L = list(one=1, two=c(1,2), five=seq(0,1,length=5))
  names(L)

* plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
--- makes a plot
* points(x, cex = .5, col = "dark red")
--- makes a point plot

* t = data.frame(x = c(11,12,14), y = c(19,20,21), z = c(10,9,7))

* adding data to a frame
df1 <- data.frame(a = factor(c('x','x','x','y','y','y', NA, NA, NA)),
                  b = factor(c('x','y', NA,'x','y', NA,'x','y', NA)))
data.frame(df1, isSame = someFUNChere(df1$a, df1$b))

* v = seq(from=0, to=1, by=0.25)
* mat=matrix(data=c(9,2,3,4,5,6),ncol=3)
* rnorm, runif
* help.search("random")

* ctrl+enter : run line or selection in console
* working dir (getwd(),setwd(name)): file IO & figure IO
* concatenate: v=c(1,2,3)


* tab completion
* sum
* mean
* sample

* rnorm(n=10, mean=1.2, sd=3.4)
--- 10 samples from a normal distribution
* help(rnorm) --> see the defaults

* seq(1,10,1) === 1:10
* seq.int(1,10,1) === 1:10

* example(rnorm)
* curve
* mtext

* help.start()

* source("something.R")



